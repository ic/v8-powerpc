# Copyright 2009 the V8 project authors. All rights reserved.
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.
#     * Neither the name of Google Inc. nor the names of its
#       contributors may be used to endorse or promote products derived
#       from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

prefix es5conform
def UNIMPLEMENTED = PASS || FAIL
def FAIL_OK = FAIL, OKAY


##############################################################################
# Non UTF8 characters in test files.
chapter10/10.4/10.4.2/10.4.2-3-c-2-s: FAIL_OK
chapter10/10.4/10.4.2/10.4.2-3-c-1-s: FAIL_OK
chapter10/10.4/10.4.2/10.4.2-2-c-1: FAIL_OK

# We do not implement the error chekcs specified in the production rules
# of 11.1.5 (Object initializer).
# We are compatible with Safari and Firefox.
chapter11/11.1/11.1.5: UNIMPLEMENTED

# We do not have a global object called 'global' as required by tests.
chapter15/15.1: FAIL_OK

# NaN is writable. We are compatible with JSC.
chapter15/15.2/15.2.3/15.2.3.3/15.2.3.3-4-178: FAIL_OK
# Infinity is writable. We are compatible with JSC.
chapter15/15.2/15.2.3/15.2.3.3/15.2.3.3-4-179: FAIL_OK
# undefined is writable. We are compatible with JSC.
chapter15/15.2/15.2.3/15.2.3.3/15.2.3.3-4-180: FAIL_OK

# Our Function object has an "arguments" property which is used as a
# non-property in the test.
chapter15/15.2/15.2.3/15.2.3.3/15.2.3.3-4-183: FAIL_OK

# Our Function object has a "caller" property which is used as a
# non-property in in the test.
chapter15/15.2/15.2.3/15.2.3.3/15.2.3.3-4-184: FAIL_OK

# Our function object has a name property which is used as a
# non-property in the test.
chapter15/15.2/15.2.3/15.2.3.3/15.2.3.3-4-188: FAIL_OK

# NOT IMPLEMENTED: RegExp.prototype.source
chapter15/15.2/15.2.3/15.2.3.3/15.2.3.3-4-212: UNIMPLEMENTED

# NOT IMPLEMENTED: RegExp.prototype.global
chapter15/15.2/15.2.3/15.2.3.3/15.2.3.3-4-213: UNIMPLEMENTED

# NOT IMPLEMENTED: RegExp.prototype.ignoreCase
chapter15/15.2/15.2.3/15.2.3.3/15.2.3.3-4-214: UNIMPLEMENTED

# NOT IMPLEMENTED: RegExp.prototype.multiline
chapter15/15.2/15.2.3/15.2.3.3/15.2.3.3-4-215: UNIMPLEMENTED

# All of the tests below marked SUBSETFAIL (in 15.2.3.4) fail because 
# the tests assumes that objects can not have more properties
# than those described in the spec - but according to spec they can 
# have additional properties.
# All compareArray calls in these tests could be exchanged with a 
# isSubsetOfArray call (I will upload a patch to the es5conform site).

# SUBSETFAIL
chapter15/15.2/15.2.3/15.2.3.4/15.2.3.4-4-1: FAIL_OK

# SUBSETFAIL + we do not implement all methods on Object.
chapter15/15.2/15.2.3/15.2.3.4/15.2.3.4-4-2: FAIL_OK

# SUBSETFAIL
chapter15/15.2/15.2.3/15.2.3.4/15.2.3.4-4-3: FAIL_OK

# SUBSETFAIL
chapter15/15.2/15.2.3/15.2.3.4/15.2.3.4-4-4: FAIL_OK

# SUBSETFAIL
chapter15/15.2/15.2.3/15.2.3.4/15.2.3.4-4-5: FAIL_OK

# SUBSETFAIL
chapter15/15.2/15.2.3/15.2.3.4/15.2.3.4-4-6: FAIL_OK

# SUBSETFAIL
chapter15/15.2/15.2.3/15.2.3.4/15.2.3.4-4-7: FAIL_OK

# SUBSETFAIL
chapter15/15.2/15.2.3/15.2.3.4/15.2.3.4-4-11: FAIL_OK

# We do not implement all methods on RegExp.
chapter15/15.2/15.2.3/15.2.3.4/15.2.3.4-4-13: FAIL

# SUBSETFAIL
chapter15/15.2/15.2.3/15.2.3.4/15.2.3.4-4-14: FAIL_OK

# EvalError.prototype does not have message property.
chapter15/15.2/15.2.3/15.2.3.4/15.2.3.4-4-15: FAIL

# Rangeerror.prototype does not have message property.
chapter15/15.2/15.2.3/15.2.3.4/15.2.3.4-4-16: FAIL

# ReferenceError.prototype does not have message property.
chapter15/15.2/15.2.3/15.2.3.4/15.2.3.4-4-17: FAIL

# SyntaxError.prototype does not have message property.
chapter15/15.2/15.2.3/15.2.3.4/15.2.3.4-4-18: FAIL

# TypeError.prototype does not have message property.
chapter15/15.2/15.2.3/15.2.3.4/15.2.3.4-4-19: FAIL

# URIError.prototype does not have message property.
chapter15/15.2/15.2.3/15.2.3.4/15.2.3.4-4-20: FAIL

# SUBSETFAIL
chapter15/15.2/15.2.3/15.2.3.4/15.2.3.4-4-22: FAIL_OK

# SUBSETFAIL
chapter15/15.2/15.2.3/15.2.3.4/15.2.3.4-4-23: FAIL_OK

# SUBSETFAIL
chapter15/15.2/15.2.3/15.2.3.4/15.2.3.4-4-24: FAIL_OK

# SUBSETFAIL
chapter15/15.2/15.2.3/15.2.3.4/15.2.3.4-4-25: FAIL_OK

# SUBSETFAIL
chapter15/15.2/15.2.3/15.2.3.4/15.2.3.4-4-26: FAIL_OK

# SUBSETFAIL
chapter15/15.2/15.2.3/15.2.3.4/15.2.3.4-4-27: FAIL_OK

# SUBSETFAIL
chapter15/15.2/15.2.3/15.2.3.4/15.2.3.4-4-28: FAIL_OK

# SUBSETFAIL
chapter15/15.2/15.2.3/15.2.3.4/15.2.3.4-4-29: FAIL_OK

# SUBSETFAIL
chapter15/15.2/15.2.3/15.2.3.4/15.2.3.4-4-30: FAIL_OK

# SUBSETFAIL
chapter15/15.2/15.2.3/15.2.3.4/15.2.3.4-4-31: FAIL_OK

# SUBSETFAIL
chapter15/15.2/15.2.3/15.2.3.4/15.2.3.4-4-32: FAIL_OK

# SUBSETFAIL
chapter15/15.2/15.2.3/15.2.3.4/15.2.3.4-4-33: FAIL_OK

# SUBSETFAIL
chapter15/15.2/15.2.3/15.2.3.4/15.2.3.4-4-34: FAIL_OK

# SUBSETFAIL
chapter15/15.2/15.2.3/15.2.3.4/15.2.3.4-4-35: FAIL_OK

# Bad test - the spec does not say anything about throwing errors
# on calling Array.prototype.indexOf with undefined as argument.
chapter15/15.4/15.4.4/15.4.4.14/15.4.4.14-1-1: FAIL_OK

# Bad test - the spec does not say anything about throwing errors
# on calling Array.prototype.indexOf with null as argument.
chapter15/15.4/15.4.4/15.4.4.14/15.4.4.14-1-2: FAIL_OK

# Bad test - the test at the end should be "i === true".
chapter15/15.4/15.4.4/15.4.4.17/15.4.4.17-8-10: FAIL_OK

# Bad test - according to spec some returns a Boolean, not a number.
chapter15/15.4/15.4.4/15.4.4.17/15.4.4.17-4-9: FAIL_OK

# Bad test - uses unitialized variable a in precondition check.
chapter15/15.4/15.4.4/15.4.4.19/15.4.4.19-9-3: FAIL_OK

# We do not implement Array mapping functions correctly if array
# entries are added for nonexistent entries smaller than length by
# the callback function. We are compatible with JSC.
# See http://code.google.com/p/v8/issues/detail?id=755
chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-1: FAIL_OK

# Bad tests, path in test file is wrong. This will crash the test
# script so we mark it SKIP.
chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-ii-4: SKIP
chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-c-ii-4-s: SKIP

# Bad test - deleting the property on o in callbackfn will
# have no effect on the actual array on which reduceRight is called.
chapter15/15.4/15.4.4/15.4.4.22/15.4.4.22-9-7: FAIL_OK

# We do not implement trim correctly on null and undefined.
chapter15/15.5/15.5.4/15.5.4.20/15.5.4.20-1-1: FAIL
chapter15/15.5/15.5.4/15.5.4.20/15.5.4.20-1-2: FAIL

# We do not correctly recognize \uFEFF as whitespace
chapter15/15.5/15.5.4/15.5.4.20/15.5.4.20-4-10: FAIL
chapter15/15.5/15.5.4/15.5.4.20/15.5.4.20-4-18: FAIL
chapter15/15.5/15.5.4/15.5.4.20/15.5.4.20-4-34: FAIL

# RegExp.prototype is not of type RegExp - we are bug compatible with JSC.
chapter15/15.10/15.10.6/15.10.6: FAIL_OK

# We do not have the properties of a RegExp instance on RegExp.prototype.
# The spec says we should - but we are currently bug compatible with JSC.
chapter15/15.10/15.10.7/15.10.7.1/15.10.7.1-1: FAIL_OK
chapter15/15.10/15.10.7/15.10.7.1/15.10.7.1-2: FAIL_OK
chapter15/15.10/15.10.7/15.10.7.2/15.10.7.2-1: FAIL_OK
chapter15/15.10/15.10.7/15.10.7.2/15.10.7.2-2: FAIL_OK
chapter15/15.10/15.10.7/15.10.7.3/15.10.7.3-1: FAIL_OK
chapter15/15.10/15.10.7/15.10.7.3/15.10.7.3-2: FAIL_OK
chapter15/15.10/15.10.7/15.10.7.4/15.10.7.4-1: FAIL_OK
chapter15/15.10/15.10.7/15.10.7.4/15.10.7.4-2: FAIL_OK
chapter15/15.10/15.10.7/15.10.7.5/15.10.7.5-1: FAIL_OK
chapter15/15.10/15.10.7/15.10.7.5/15.10.7.5-2: FAIL_OK

##############################################################################
# Unimplemented parts of strict mode
# Setting expectations to fail only so that the tests trigger as soon as
# the strict mode feature gets implemented

# A directive preceeding an 'use strict' directive may not contain an OctalEscapeSequence
# Incorrect test - need double escape in eval.
chapter07/7.8/7.8.4/7.8.4-1-s: FAIL

# this is not coerced to an object in strict mode (Number)
chapter10/10.4/10.4.3/10.4.3-1-1-s: FAIL
# this is not coerced to an object in strict mode (string)
chapter10/10.4/10.4.3/10.4.3-1-2-s: FAIL
# this is not coerced to an object in strict mode (undefined)
chapter10/10.4/10.4.3/10.4.3-1-3-s: FAIL
# this is not coerced to an object in strict mode (boolean)
chapter10/10.4/10.4.3/10.4.3-1-4-s: FAIL

# arguments[i] remains same after changing actual parameters in strict mode
chapter10/10.6/10.6-10-c-ii-1-s: FAIL
# arguments[i] doesn't map to actual parameters in strict mode
chapter10/10.6/10.6-10-c-ii-2-s: FAIL

# Accessing caller property of Arguments object throws TypeError in strict mode
chapter10/10.6/10.6-13-b-1-s: FAIL
# arguments.caller exists in strict mode
chapter10/10.6/10.6-13-b-2-s: FAIL
# arguments.caller is non-configurable in strict mode
chapter10/10.6/10.6-13-b-3-s: FAIL
# Accessing callee property of Arguments object throws TypeError in strict mode
chapter10/10.6/10.6-13-c-1-s: FAIL
# arguments.callee is non-configurable in strict mode
chapter10/10.6/10.6-13-c-3-s: FAIL

# simple assignment throws ReferenceError if LeftHandSide is an unresolvable reference in strict mode
chapter11/11.13/11.13.1/11.13.1-1-5-s: FAIL
# simple assignment throws TypeError if LeftHandSide is a property reference with a primitive base value (this is undefined)
chapter11/11.13/11.13.1/11.13.1-1-7-s: FAIL

# simple assignment throws TypeError if LeftHandSide is a readonly property in strict mode (Global.NaN)
chapter11/11.13/11.13.1/11.13.1-4-2-s: FAIL
# simple assignment throws TypeError if LeftHandSide is a readonly property in strict mode (Global.Infinity)
chapter11/11.13/11.13.1/11.13.1-4-3-s: FAIL
# simple assignment throws TypeError if LeftHandSide is a readonly property in strict mode (Global.length)
chapter11/11.13/11.13.1/11.13.1-4-4-s: FAIL
# simple assignment throws TypeError if LeftHandSide is a readonly property in strict mode (Object.length)
chapter11/11.13/11.13.1/11.13.1-4-5-s: FAIL
# simple assignment throws TypeError if LeftHandSide is a readonly property in strict mode (Function.length)
chapter11/11.13/11.13.1/11.13.1-4-6-s: FAIL
# simple assignment throws TypeError if LeftHandSide is a readonly property in strict mode (Array.length)
chapter11/11.13/11.13.1/11.13.1-4-7-s: FAIL
# simple assignment throws TypeError if LeftHandSide is a readonly property in strict mode (String.length)
chapter11/11.13/11.13.1/11.13.1-4-8-s: FAIL
# simple assignment throws TypeError if LeftHandSide is a readonly property in strict mode (Boolean.length)
chapter11/11.13/11.13.1/11.13.1-4-9-s: FAIL
# simple assignment throws TypeError if LeftHandSide is a readonly property in strict mode (Number.length)
chapter11/11.13/11.13.1/11.13.1-4-10-s: FAIL
# simple assignment throws TypeError if LeftHandSide is a readonly property in strict mode (Date.length)
chapter11/11.13/11.13.1/11.13.1-4-11-s: FAIL
# simple assignment throws TypeError if LeftHandSide is a readonly property in strict mode (RegExp.length)
chapter11/11.13/11.13.1/11.13.1-4-12-s: FAIL
# simple assignment throws TypeError if LeftHandSide is a readonly property in strict mode (Error.length)
chapter11/11.13/11.13.1/11.13.1-4-13-s: FAIL
# simple assignment throws TypeError if LeftHandSide is a readonly property in strict mode (Number.MAX_VALUE)
chapter11/11.13/11.13.1/11.13.1-4-14-s: FAIL
# simple assignment throws TypeError if LeftHandSide is a readonly property in strict mode (Number.MIN_VALUE)
chapter11/11.13/11.13.1/11.13.1-4-15-s: FAIL
# simple assignment throws TypeError if LeftHandSide is a readonly property in strict mode (Number.NaN)
chapter11/11.13/11.13.1/11.13.1-4-16-s: FAIL
# simple assignment throws TypeError if LeftHandSide is a readonly property in strict mode (Number.NEGATIVE_INFINITY)
chapter11/11.13/11.13.1/11.13.1-4-17-s: FAIL
# simple assignment throws TypeError if LeftHandSide is a readonly property in strict mode (Number.POSITIVE_INFINITY)
chapter11/11.13/11.13.1/11.13.1-4-18-s: FAIL
# simple assignment throws TypeError if LeftHandSide is a readonly property in strict mode (Math.E)
chapter11/11.13/11.13.1/11.13.1-4-19-s: FAIL
# simple assignment throws TypeError if LeftHandSide is a readonly property in strict mode (Math.LN10)
chapter11/11.13/11.13.1/11.13.1-4-20-s: FAIL
# simple assignment throws TypeError if LeftHandSide is a readonly property in strict mode (Math.LN2)
chapter11/11.13/11.13.1/11.13.1-4-21-s: FAIL
# simple assignment throws TypeError if LeftHandSide is a readonly property in strict mode (Math.LOG2E)
chapter11/11.13/11.13.1/11.13.1-4-22-s: FAIL
# simple assignment throws TypeError if LeftHandSide is a readonly property in strict mode (Math.LOG10E)
chapter11/11.13/11.13.1/11.13.1-4-23-s: FAIL
# simple assignment throws TypeError if LeftHandSide is a readonly property in strict mode (Math.PI)
chapter11/11.13/11.13.1/11.13.1-4-24-s: FAIL
# simple assignment throws TypeError if LeftHandSide is a readonly property in strict mode (Math.SQRT1_2)
chapter11/11.13/11.13.1/11.13.1-4-25-s: FAIL
# simple assignment throws TypeError if LeftHandSide is a readonly property in strict mode (Math.SQRT2)
chapter11/11.13/11.13.1/11.13.1-4-26-s: FAIL
# simple assignment throws TypeError if LeftHandSide is a readonly property in strict mode (Global.undefined)
chapter11/11.13/11.13.1/11.13.1-4-27-s: FAIL

# delete operator throws TypeError when deleting a non-configurable data property in strict mode
chapter11/11.4/11.4.1/11.4.1-4.a-3-s: FAIL
# delete operator throws TypeError when when deleting a non-configurable data property in strict mode (Global.NaN)
chapter11/11.4/11.4.1/11.4.1-4.a-4-s: FAIL
# delete operator throws TypeError when deleting a non-configurable data property in strict mode (Math.LN2)
chapter11/11.4/11.4.1/11.4.1-4.a-9-s: FAIL

# delete operator throws ReferenceError when deleting a direct reference to a var in strict mode
chapter11/11.4/11.4.1/11.4.1-5-1-s: FAIL
# delete operator throws ReferenceError when deleting a direct reference to a function argument in strict mode
chapter11/11.4/11.4.1/11.4.1-5-2-s: FAIL
# delete operator throws ReferenceError when deleting a direct reference to a function name in strict mode
chapter11/11.4/11.4.1/11.4.1-5-3-s: FAIL
# delete operator throws SyntaxError when deleting a direct reference to a function argument(object) in strict mode
chapter11/11.4/11.4.1/11.4.1-5-4-s: FAIL

# eval - a function declaring a var named 'eval' throws EvalError in strict mode
# EvalError - incorrect test (SyntaxError should be expected instead of EvalError)
chapter12/12.2/12.2.1/12.2.1-1-s: FAIL
# eval - a function assigning into 'eval' throws EvalError in strict mode
# EvalError - incorrect test (SyntaxError should be expected instead of EvalError)
chapter12/12.2/12.2.1/12.2.1-2-s: FAIL
# eval - a function expr declaring a var named 'eval' throws EvalError in strict mode
# EvalError - incorrect test (SyntaxError should be expected instead of EvalError)
chapter12/12.2/12.2.1/12.2.1-3-s: FAIL
# eval - a function expr assigning into 'eval' throws a EvalError in strict mode
# EvalError - incorrect test (SyntaxError should be expected instead of EvalError)
chapter12/12.2/12.2.1/12.2.1-4-s: FAIL
# eval - a Function declaring var named 'eval' throws EvalError in strict mode
# EvalError - incorrect test (SyntaxError should be expected instead of EvalError)
chapter12/12.2/12.2.1/12.2.1-5-s: FAIL
# eval - a Function assigning into 'eval' throws EvalError in strict mode
# EvalError - incorrect test (SyntaxError should be expected instead of EvalError)
chapter12/12.2/12.2.1/12.2.1-6-s: FAIL
# eval - a direct eval declaring a var named 'eval' throws EvalError in strict mode
# EvalError - incorrect test (SyntaxError should be expected instead of EvalError)
chapter12/12.2/12.2.1/12.2.1-7-s: FAIL
# eval - a direct eval assigning into 'eval' throws EvalError in strict mode
# EvalError - incorrect test (SyntaxError should be expected instead of EvalError)
chapter12/12.2/12.2.1/12.2.1-8-s: FAIL
# eval - an indirect eval declaring a var named 'eval' throws EvalError in strict mode
# EvalError - incorrect test (SyntaxError should be expected instead of EvalError)
chapter12/12.2/12.2.1/12.2.1-9-s: FAIL
# eval - an indirect eval assigning into 'eval' throws EvalError in strict mode
# EvalError - incorrect test (SyntaxError should be expected instead of EvalError)
chapter12/12.2/12.2.1/12.2.1-10-s: FAIL

# SyntaxError if eval used as function identifier in function declaration with strict body
# test uses implicit return (which doesn't seem to work in v8 or safari jsc)
chapter13/13.1/13.1-3-3-s: FAIL
# SyntaxError if eval used as function identifier in function expression with strict body
# test uses implicit return (which doesn't seem to work in v8 or safari jsc)
chapter13/13.1/13.1-3-4-s: FAIL
# SyntaxError if eval used as function identifier in function declaration in strict code
# test uses implicit return (which doesn't seem to work in v8 or safari jsc)
chapter13/13.1/13.1-3-5-s: FAIL
# SyntaxError if eval used as function identifier in function expression in strict code
# test uses implicit return (which doesn't seem to work in v8 or safari jsc)
chapter13/13.1/13.1-3-6-s: FAIL
# SyntaxError if arguments used as function identifier in function declaration with strict body
# test uses implicit return (which doesn't seem to work in v8 or safari jsc)
chapter13/13.1/13.1-3-9-s: FAIL
# SyntaxError if arguments used as function identifier in function expression with strict body
# test uses implicit return (which doesn't seem to work in v8 or safari jsc)
chapter13/13.1/13.1-3-10-s: FAIL
# SyntaxError if arguments used as function identifier in function declaration in strict code
# test uses implicit return (which doesn't seem to work in v8 or safari jsc)
chapter13/13.1/13.1-3-11-s: FAIL
# SyntaxError if arguments used as function identifier in function expression in strict code
# test uses implicit return (which doesn't seem to work in v8 or safari jsc)
chapter13/13.1/13.1-3-12-s: FAIL

# 'use strict' directive - correct usage
# depends on "this is not coerced to an object in strict mode (undefined)"
chapter14/14.1/14.1-1-s: FAIL
# "use strict" directive - correct usage double quotes
# depends on "this is not coerced to an object in strict mode (undefined)"
chapter14/14.1/14.1-2-s: FAIL
# 'use strict' directive - may follow other directives
# depends on "this is not coerced to an object in strict mode (undefined)"
chapter14/14.1/14.1-8-s: FAIL
# 'use strict' directive - may occur multiple times
# depends on "this is not coerced to an object in strict mode (undefined)"
chapter14/14.1/14.1-9-s: FAIL
# other directives - may follow 'use strict' directive
# depends on "this is not coerced to an object in strict mode (undefined)"
chapter14/14.1/14.1-10-s: FAIL
# comments may preceed 'use strict' directive
# depends on "this is not coerced to an object in strict mode (undefined)"
chapter14/14.1/14.1-11-s: FAIL
# comments may follow 'use strict' directive
# depends on "this is not coerced to an object in strict mode (undefined)"
chapter14/14.1/14.1-12-s: FAIL
# semicolon insertion works for'use strict' directive
# depends on "this is not coerced to an object in strict mode (undefined)"
chapter14/14.1/14.1-13-s: FAIL
# semicolon insertion may come before 'use strict' directive
# depends on "this is not coerced to an object in strict mode (undefined)"
chapter14/14.1/14.1-14-s: FAIL
# blank lines may come before 'use strict' directive
# depends on "this is not coerced to an object in strict mode (undefined)"
chapter14/14.1/14.1-15-s: FAIL

# Duplicate combined parameter name allowed in Function constructor called in strict mode if body not strict
# Invalid test case per ECMA-262 5th Edition, 10.1.1, bullet 4
chapter15/15.3/15.3.2/15.3.2.1/15.3.2.1-11-6-s: FAIL

# Array.prototype.every - thisArg not passed to strict callbackfn
chapter15/15.4/15.4.4/15.4.4.16/15.4.4.16-5-1-s: FAIL
# Array.prototype.some - thisArg not passed to strict callbackfn
chapter15/15.4/15.4.4/15.4.4.17/15.4.4.17-5-1-s: FAIL
# Array.prototype.forEach - thisArg not passed to strict callbackfn
chapter15/15.4/15.4.4/15.4.4.18/15.4.4.18-5-1-s: FAIL
# Array.prototype.map - thisArg not passed to strict callbackfn
chapter15/15.4/15.4.4/15.4.4.19/15.4.4.19-5-1-s: FAIL
# Array.prototype.filter - thisArg not passed to strict callbackfn
chapter15/15.4/15.4.4/15.4.4.20/15.4.4.20-5-1-s: FAIL
# Array.prototype.reduce - null passed as thisValue to strict callbackfn
chapter15/15.4/15.4.4/15.4.4.21/15.4.4.21-9-c-ii-4-s: FAIL

[ $arch == mips ]

# Skip all tests on MIPS.
*: SKIP
